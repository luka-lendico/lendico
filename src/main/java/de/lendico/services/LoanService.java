package de.lendico.services;import de.lendico.dto.EmiBreakDownResponse;import de.lendico.dto.LoanRequest;import de.lendico.dto.LoanResponse;import org.springframework.stereotype.Service;import java.math.RoundingMode;import java.text.DecimalFormat;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.LinkedList;import java.util.List;import java.util.Locale;import lombok.extern.slf4j.Slf4j;@Slf4j@Servicepublic class LoanService {    DecimalFormat decimalFormat = new DecimalFormat("#.##");    public EmiBreakDownResponse calculateLoan(LoanRequest loanRequest) {        Long duration = loanRequest.getDuration();        List loanEmiList = new LinkedList();        calculateEmi(loanRequest, null, duration, 0.0, loanEmiList, 0.0);        return EmiBreakDownResponse.builder().loanResponseList(loanEmiList).build();    }    private void calculateEmi(LoanRequest loanRequest, String startDate, Long duration, Double outStanding, List listOfEmis, Double emi) {        if (outStanding <= 0)            outStanding = Double.parseDouble(loanRequest.getLoanAmount());        double montthlyIntrest = (outStanding * (Double.parseDouble(loanRequest.getNominalRate()) / 12) / 100);        double r = Double.parseDouble(loanRequest.getNominalRate()) / (12 * 100);        if (emi <= 0) {            emi = (outStanding * r * (float) Math.pow(1 + r, loanRequest.getDuration()))                    / (float) (Math.pow(1 + r, loanRequest.getDuration()) - 1);        }        Double principalComponent = emi - montthlyIntrest;        Double outStd = outStanding - principalComponent <= 0 ? 0 : outStanding - principalComponent;        decimalFormat.setRoundingMode(RoundingMode.DOWN);        if (duration != 0) {            String emiDate = null;            if (startDate == null) {                emiDate = loanRequest.getStartDate();            } else {                emiDate = emiDate(loanRequest.getStartDate());            }            LoanResponse res = LoanResponse.builder()                    .borrowerPaymentAmount(decimalFormat.format(emi))                    .initialOutstandingPrincipal(decimalFormat.format(Double.parseDouble(loanRequest.getLoanAmount())))                    .interest(decimalFormat.format(montthlyIntrest))                    .principal(decimalFormat.format(principalComponent))                    .remainingOutstandingPrincipal(decimalFormat.format(outStd))                    .date(emiDate)                    .build();            listOfEmis.add(res);            loanRequest.setStartDate(res.getDate());            calculateEmi(loanRequest, loanRequest.getStartDate(), duration - 1, outStd, listOfEmis, emi);        }    }    private String emiDate(String dateStr) {        String finalDate = null;        try {            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ", Locale.getDefault());            Date date1 = sdf.parse(dateStr.replaceAll("Z$", "+0000"));            Calendar cal = sdf.getCalendar();            cal.setTime(date1);            cal.add(Calendar.MONTH, 1);            return sdf.format(cal.getTime()).replace("+0100", "Z");        } catch (Exception e) {            log.info("Exception : " + e);        }        return finalDate;    }}